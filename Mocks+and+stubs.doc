Date: Thu, 12 Sep 2019 13:35:57 +0000 (UTC)
Message-ID: <1148073332.113.1568295357977@8e3aac741562>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_112_1612547435.1568295357977"

------=_Part_112_1612547435.1568295357977
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>Mocks and stubs</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>Mocks and stubs</h1>
    <div class=3D"Section1">
        <p>A test double is an object that can stand in for a real object i=
n a test, similar to how a stunt double stands in for an actor in a movie. =
The most common test doubles are mock and stubs.</p>
<p>Mocks and stubs are both dummy implementations of objects the code under=
 test interacts with (they are types of 'test doubles')</p>
<p>In plain words it means that you replace a real thing (e.g. a class, mod=
ule or function) with a fake version of that thing. The fake version looks =
and acts like the real thing (answers to the same method calls) but answers=
 with canned responses that you define yourself at the beginning of your un=
it test.</p>
<p>The same object may be replaced with a stub in one test and a mock in an=
other depending on the intent of the test.</p>
<p>Stubs can be thought of as inputs to the code under test, that hold pred=
efined data. When called they behave a certain way =E2=80=93 return a fixed=
 value, throw an exception, calculate a return value based on parameters, p=
ull from a sequence of values, etc. For example if your code queries a data=
base using a DAO you might supply a stub DAO and have tests that verify the=
 behaviour when your code finds one result, multiple results, zero results =
or when the query fails with an exception.</p>
<p>Mocks are objects that register calls they receive. In test assertion we=
 can verify on Mocks that all expected actions were performed: A mock has e=
xpectations about the way it should be called, and a test should fail if it=
=E2=80=99s not called that way. We use mocks when we don=E2=80=99t want to =
invoke production code or when there is no easy way to verify that intended=
 code was executed. Mocks are used to test interactions between objects, an=
d are useful in cases where there are no other visible state changes or ret=
urn results that you can verify e.g. an email service - We don=E2=80=99t wa=
nt to send e-mails each time we run a test. One thing we can do though is m=
ock the service and verify that it has been called. The mock records the in=
teractions, and you can then examine these to ensure that the mock was corr=
ectly called and would of fired off the required functionality if it were t=
he real-life Prod service.</p>
<p>Using test doubles is not specific to unit testing. More elaborate test =
doubles can be used to simulate entire parts of your system in a controlled=
 way. However, in unit testing you're most likely to encounter a lot of moc=
ks and stubs (depending of whether you're the sociable or solitary kind of =
developer), simply because lots of modern languages and libraries make it e=
asy and comfortable to set up mocks and stubs.</p>
<h2 id=3D"Mocksandstubs-CommandQuerySeparation"><br>Command Query Separatio=
n</h2>
<p>Methods that return some result and do not change the state of the syste=
m, are called Query. When we have a method that performs some actions that =
changes the system state, but we don=E2=80=99t expect any return value from=
 it, we call it Command. This creates a Separation of Concerns</p>
<p><br>Example</p>
<p>When you call a function getAmount(), you expect it to just return the a=
mount and not change state of the system. It would be horrific if it did. S=
imilarly, when you call setAmount(), it will have side-effects and you expe=
ct it to change the state of the system. But what do you expect setAmount()=
 to return? Probably nothing.</p>
    </div>
</body>
</html>
------=_Part_112_1612547435.1568295357977--
