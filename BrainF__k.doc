Date: Thu, 12 Sep 2019 13:36:09 +0000 (UTC)
Message-ID: <2145341235.165.1568295369930@b4d863ec203a>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_164_1530499361.1568295369930"

------=_Part_164_1530499361.1568295369930
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>BrainF**k</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: #fff !important;
        color: #000 !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: #000;
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>BrainF**k</h1>
    <div class=3D"Section1">
        <p>This is a Turing complete language, which means that you can (if=
 you were feeling masochistic enough) use it to solve any mathematical prob=
lem computationally (if you know how to program it)</p>
<p>In general for a programming language to be Turing-complete it needs:<br=
>1. A form of conditional repetition or conditional jump (while, for, if an=
d goto)<br>2. A way to read and write to some storage mechanism (variables)=
</p>
<p>The language only consists of 8 operators</p>
<p>&lt;<br>&gt;<br>+<br>-<br>[<br>]<br>,<br>.</p>
<p>It is designed to be deliberately difficult and inefficient... The idea =
behind brainf**k is memory manipulation. Basically you are given an array o=
f 30,000 1byte memory blocks. The array size is actually dependent upon the=
 implementation used in the compiler or interpretor, but standard brainf**k=
 states 30,000. Within this array, you can increase the memory pointer, inc=
rease the value at the memory pointer, etc. Let me first present to you the=
 8 operators available to us.</p>
<p>&gt; =3D increases memory pointer, or moves the pointer to the right 1 b=
lock.<br>&lt; =3D decreases memory pointer, or moves the pointer to the lef=
t 1 block.<br>+ =3D increases value stored at the block pointed to by the m=
emory pointer<br>- =3D decreases value stored at the block pointed to by th=
e memory pointer<br>[ =3D like c while(cur_block_value !=3D 0) loop.<br>] =
=3D if block currently pointed to's value is not zero, jump back to [<br>, =
=3D like c getchar(). input 1 character.<br>. =3D like c putchar(). print 1=
 character to the console</p>
<p><br></p>
<p>Any arbitrary character besides the 8 listed above should be ignored by =
the compiler or interpretor. Characters besides the 8 operators should be c=
onsidered comments.</p>
<p>All memory blocks on the "array" are set to zero at the beginning of the=
 program, and the memory pointer starts out on the very left most memory bl=
ock.</p>
<p>Loops may be nested as many times as you want, but all [ must have a cor=
responding ].</p>
<p>For example:</p>
<p>&gt;&gt;&gt;&gt;++</p>
<p>This will move the memory pointer to the fourth memory block, and increm=
ent the value stored there by 2. So it looks like</p>
<p>memory blocks<br>-------------<br>[0][0][0][2][0][0]...<br>^ memory poin=
ter</p>
<p><br></p>
<p>If we take that same program, and add more onto the end of it like:</p>
<p>&gt;&gt;&gt;&gt;++&lt;&lt;+&gt;&gt;+</p>
<p><br>At the end of our program, our memory layout will look like this:</p=
>
<p>memory blocks<br>-------------<br>[0][1][0][3][0][0]...<br>^ memory poin=
ter</p>
<p><br></p>
<p>The pointer was moved to the fourth block, incremented the value by 2, m=
oved back 2 blocks to the second block, incremented the valued stored there=
 by 1, and then the pointer moved 2 blocks to the right again to the fourth=
 block and incremented the value stored there by one. And at the end of the=
 program the memory pointer lies back on the fourth memory block. That is f=
ine and dandy, but we can't really see anything. So lets write a program th=
at will produce actual output.</p>
<p><br>++++++ [ &gt; ++++++++++ &lt; - ] &gt; +++++.</p>
<p>This program prints out the letter 'A'. First, it increments cell #1 to =
6.<br>Cell #1 will be used for looping. Then, it enters the loop ([) and mo=
ves<br>to cell #2. It increments cell #2 10 times, moves back to cell #1, a=
nd<br>decrements cell #1. This loop happens 6 times (it takes 6 decrements =
for<br>cell #1 to reach 0, at which point it skips to the corresponding ] a=
nd<br>continues on).</p>
<p>At this point, we're on cell #1, which has a value of 0, while cell #2 h=
as a<br>value of 60. We move on cell #2, increment 5 times, for a value of =
65, and then<br>print cell #2's value. 65 is 'A' in ASCII, so 'A' is printe=
d to the terminal.</p>
<p><br>Now the obligatory 'hello world':</p>
<p>&gt;+++++++++[&lt;++++++++&gt;-]&lt;.&gt;+++++++[&lt;++++&gt;-]&lt;+.+++=
++++..+++.[-]<br>&gt;++++++++[&lt;++++&gt;-] &lt;.&gt;+++++++++++[&lt;+++++=
+++&gt;-]&lt;-.--------.+++<br>.------.--------.[-]&gt;++++++++[&lt;++++&gt=
;- ]&lt;+.[-]++++++++++.</p>
<p><br>We must remember that we are working with numbers, so we must use a =
character's ASCII decimal number to represent it. then when we print it, wi=
ll print the value as an ASCII character. Lets break this program down.</p>
<p>&gt;+++++++++[&lt;++++++++&gt;-]&lt;.</p>
<p><br>Lets break this part down farther using our diagrams.</p>
<p>&gt;</p>
<p>First you can see, that we increment the memory pointer to the next memo=
ry block leaving the first memory block at zero.</p>
<p>memory blocks<br>-------------<br>[0][0][0][0][0][0]...<br>^ memory poin=
ter</p>
<p>We then increase the value at our current memory block to 9.</p>
<p>+++++++++</p>
<p>Leaving our diagram like this:</p>
<p>memory blocks<br>-------------<br>[0][9][0][0][0][0]...<br>^ memory poin=
ter</p>
<p>Since the block we are on contains a non-zero value, we then enter the l=
oop.</p>
<p>[</p>
<p>Now that we are in the loop Then we move the memory pointer one block to=
 the left</p>
<p>&lt;</p>
<p>Which gives us:</p>
<p>memory blocks<br>-------------<br>[0][9][0][0][0][0]...<br>^ memory poin=
ter</p>
<p><br>And we increment the memory blocks stored value by 8.</p>
<p>++++++++</p>
<p>So our diagram looks like:</p>
<p>memory blocks<br>-------------<br>[8][9][0][0][0][0]...<br>^ memory poin=
ter</p>
<p><br>Then we move the memory pointer one block to the right, to the secon=
d memory block again, and decrease the value stored there from 9 to 8.</p>
<p>&gt;-</p>
<p><br>Diagram:</p>
<p>memory blocks<br>-------------<br>[8][8][0][0][0][0]...<br>^ memory poin=
ter</p>
<p><br>We then hit the end of our loop.</p>
<p>]</p>
<p>It checks to see if the memory block the pointer currently points to con=
tains the value zero, but current memory block's stored value is not zero, =
so the loop starts over. Moving the pointer to the left. Increasing it by 8=
, and moving the pointer to the right. and decreasing it by 1. After the 2n=
d pass of all that, our diagram now looks like:</p>
<p><br>memory blocks<br>-------------<br>[16][7][0][0][0][0]...<br>^ memory=
 pointer</p>
<p><br>It will continue this process over and over until the value stored a=
t the second memory block is zero. It then exits the loop. Once we have exi=
ted the loop. The program moves the pointer back to the first memory block =
one final time, and prints the value stored there. If you followed that, yo=
u would see that we increased the first memory blocks stored value by 8, 9 =
times. We know that 8*9=3D72 and 72 is the ASCII decimal value for 'H'.</p>
<p><br>&lt;.</p>
<p><br>And the diagram:</p>
<p><br>memory blocks<br>-------------<br>[72][0][0][0][0][0]...<br>^ memory=
 pointer</p>
<p><br>call the print function. and 'H' is printed to the console.</p>
<p><br>We can work out the rest... See</p>
<p><a href=3D"http://fatiherikli.github.io/brainfuck-visualizer/#KysrKysgKy=
srKysgICAgICAgICAgICAgaW5pdGlhbGl6ZSBjb3VudGVyIChjZWxsICMwKSB0byAxMApbICAgI=
CAgICAgICAgICAgICAgICAgICB1c2UgbG9vcCB0byBzZXQgNzAvMTAwLzMwLzEwCiAgICA+ICsr=
KysrICsrICAgICAgICAgICAgICBhZGQgIDcgdG8gY2VsbCAjMQogICAgPiArKysrKyArKysrKyA=
gICAgICAgICAgYWRkIDEwIHRvIGNlbGwgIzIKICAgID4gKysrICAgICAgICAgICAgICAgICAgIG=
FkZCAgMyB0byBjZWxsICMzCiAgICA+ICsgICAgICAgICAgICAgICAgICAgICBhZGQgIDEgdG8gY=
2VsbCAjNAo8PDw8IC0gICAgICAgICAgICAgICAgICBkZWNyZW1lbnQgY291bnRlciAoY2VsbCAj=
MCkKXQo+ICsrIC4gICAgICAgICAgICAgICAgICBwcmludCAnSCcKPiArIC4gICAgICAgICAgICA=
gICAgICAgcHJpbnQgJ2UnCisrKysrICsrIC4gICAgICAgICAgICAgIHByaW50ICdsJwouICAgIC=
AgICAgICAgICAgICAgICAgICBwcmludCAnbCcKKysrIC4gICAgICAgICAgICAgICAgICAgcHJpb=
nQgJ28nCj4gKysgLiAgICAgICAgICAgICAgICAgIHByaW50ICcgJwo8PCArKysrKyArKysrKyAr=
KysrKyAuICBwcmludCAnVycKPiAuICAgICAgICAgICAgICAgICAgICAgcHJpbnQgJ28nCisrKyA=
uICAgICAgICAgICAgICAgICAgIHByaW50ICdyJwotLS0tLSAtIC4gICAgICAgICAgICAgICBwcm=
ludCAnbCcKLS0tLS0gLS0tIC4gICAgICAgICAgICAgcHJpbnQgJ2QnCj4gKyAuICAgICAgICAgI=
CAgICAgICAgIHByaW50ICchJwo+IC4gICAgICAgICAgICAgICAgICAgICBwcmludCAnXG4n" cl=
ass=3D"external-link" rel=3D"nofollow">http://fatiherikli.github.io/brainfu=
ck-visualizer/#KysrKysgKysrKysgICAgICAgICAgICAgaW5pdGlhbGl6ZSBjb3VudGVyIChj=
ZWxsICMwKSB0byAxMApbICAgICAgICAgICAgICAgICAgICAgICB1c2UgbG9vcCB0byBzZXQgNzA=
vMTAwLzMwLzEwCiAgICA+ICsrKysrICsrICAgICAgICAgICAgICBhZGQgIDcgdG8gY2VsbCAjMQ=
ogICAgPiArKysrKyArKysrKyAgICAgICAgICAgYWRkIDEwIHRvIGNlbGwgIzIKICAgID4gKysrI=
CAgICAgICAgICAgICAgICAgIGFkZCAgMyB0byBjZWxsICMzCiAgICA+ICsgICAgICAgICAgICAg=
ICAgICAgICBhZGQgIDEgdG8gY2VsbCAjNAo8PDw8IC0gICAgICAgICAgICAgICAgICBkZWNyZW1=
lbnQgY291bnRlciAoY2VsbCAjMCkKXQo+ICsrIC4gICAgICAgICAgICAgICAgICBwcmludCAnSC=
cKPiArIC4gICAgICAgICAgICAgICAgICAgcHJpbnQgJ2UnCisrKysrICsrIC4gICAgICAgICAgI=
CAgIHByaW50ICdsJwouICAgICAgICAgICAgICAgICAgICAgICBwcmludCAnbCcKKysrIC4gICAg=
ICAgICAgICAgICAgICAgcHJpbnQgJ28nCj4gKysgLiAgICAgICAgICAgICAgICAgIHByaW50ICc=
gJwo8PCArKysrKyArKysrKyArKysrKyAuICBwcmludCAnVycKPiAuICAgICAgICAgICAgICAgIC=
AgICAgcHJpbnQgJ28nCisrKyAuICAgICAgICAgICAgICAgICAgIHByaW50ICdyJwotLS0tLSAtI=
C4gICAgICAgICAgICAgICBwcmludCAnbCcKLS0tLS0gLS0tIC4gICAgICAgICAgICAgcHJpbnQg=
J2QnCj4gKyAuICAgICAgICAgICAgICAgICAgIHByaW50ICchJwo+IC4gICAgICAgICAgICAgICA=
gICAgICBwcmludCAnXG4n</a></p>
<p><br></p>
<h2 id=3D"BrainF**k-userinput:"><br>user input:</h2>
<p><br>Input in brainf**k is controlled by the ',' operator. It will get a =
character and store its ASCII decimal value to the current memory block tha=
t the memory pointer points to. Lets experiment with it a bit.</p>
<p>, [ &gt; + &lt; - ] &gt; .</p>
<p>This program reads a character from the user input and copies the charac=
ter into<br>cell #1. Then we start a loop. Move to cell #2, increment the v=
alue at cell #2,<br>move back to cell #1, and decrease the value at cell #1=
. This continues on<br>until cell #1 is 0, and cell #2 holds cell #1's old =
value. Because we're on<br>cell #1 at the end of the loop, move to cell #2,=
 and then print out the value<br>in ASCII.</p>
<p><br>Remember, when you use the input operator, you are actually storing =
the decimal ASCII value of the character you press on the keyboard. So pres=
sing 2 for input isn't actually storing 2. Its storing the decimal value of=
 the ASCII char '2', which is decimal 50.</p>
<p>,.,.,.</p>
<p><br>This will take in 3 characters and print them out.</p>
<p>&gt;,[&gt;,]&lt;[&lt;]&gt;[.&gt;]</p>
<p>This is a program that will act like the UNIX cat command. It will read =
in from STDIN and output to STDOUT. Lets break it down.</p>
<p>&gt;,</p>
<p>Move the memory pointer the the second memory block leaving the first bl=
ock with a value of zero. Input a value and store it at the current memory =
pointer location which is the second memory block.</p>
<p>[&gt;,]</p>
<p>Begin a loop that will move the pointer up a memory block, and Input a v=
alue and store it there. This will repeat until it encounters a NULL charac=
ter (\0 or decimal value of zero);</p>
<p>&lt;[&lt;]</p>
<p>Rewind. Once we've made it to this point in the program, it means that w=
e have encountered a NULL character. So in order to start our loop, we need=
 to move the memory pointer one memory block backwards so that we have a no=
n-zero value stored there. Once there, the loops starts, and moves the memo=
ry pointer one block to the left until we reach the first memory block, whi=
ch we left with a value of zero at the beginning of the program. Once it re=
aches the first memory block with the value of zero, the loop exits.</p>
<p><br></p>
<h2 id=3D"BrainF**k-Conditionalstatements"><br>Conditional statements</h2>
<p>Say we want to input into memory block 1. Then we would like to test if =
the input value (x) was equal to 5, and if so, set y to 3. There are two wa=
ys to do this, one is the destructive flow control, where it diminishes the=
 value you are test. The other obviously non-destructive flow control. wher=
e you variable stays intact.</p>
<p>Here is non destructive:</p>
<p>In BrainF**k:</p>
<p>,[&gt;&gt;+&gt;+&lt;&lt;&lt;-]&gt;&gt;&gt;[&lt;&lt;&lt;+&gt;&gt;&gt;-]&g=
t;+&lt;&lt;[-----[&gt;]&gt;&gt;[&lt;&lt;&lt;+++&gt;&gt;&gt;[-]]</p>
<p>Once again, lets break that down to hopefully explain that better. Run t=
hough this twice. Once as we go along assuming the value 6 was entered, and=
 once assuming the value 5 was entered. Also, remember, Brainf**k will only=
 enter as loop if the value in the block that the pointer is currently on i=
s non-zero. If the value at the block is zero, then it will skip over that =
loop and ignore it. And the same goes while in a loop. If when it reaches t=
he other end of that loop ( ] ), if the value stored at the block where the=
 pointer is currently at is zero, it will exit the loop and continue on wit=
h the program.</p>
<p>input into x.</p>
<p>,<br>1 2 3 4 5 6<br>[x][y][0][0][0][0]...<br>^ memory pointer</p>
<p><br>copy from block 1, to block 3, using block 4 as a temp storage. We e=
nd on block number 4.</p>
<p>[&gt;&gt;+&gt;+&lt;&lt;&lt;-]&gt;&gt;&gt;[&lt;&lt;&lt;+&gt;&gt;&gt;-]</p=
>
<p><br>1 2 3 4 5 6<br>[x][y][x][0][0][0]<br>^ memory pointer</p>
<p><br>set block 5 to 1. This will be our block to test for true of false. =
Then move the pointer back to 3.</p>
<p>&gt;+&lt;&lt;</p>
<p>1 2 3 4 5 6<br>[x][y][x][0][1][0]<br>^ memory pointer</p>
<p><br>Now subtract 5 and if x was 5 set y to 3 and then move the pointer b=
ack over to block 5 and set back to zero so that the loop will only run onc=
e. If x was not equal to 5, then the pointer will end up resting on memory =
block 6.</p>
<p>[-----[&gt;]&gt;&gt;[&lt;&lt;&lt;+++&gt;&gt;&gt;[-]]</p>
<p>if x was 5:</p>
<p>1 2 3 4 5 6 [x][3][0][0][0][0]... ^ memory pointer</p>
<p>if x was not 5</p>
<p>1 2 3 4 5 6 [x][y][x][0][1][0]... ^ memory pointer</p>
<p>That was the non destructive way to do an if statement. The destructive =
way would be to just subtract from the input variable directly instead of c=
opying it. this will lead to much shorter code. Lets test x for the value 5=
 again and set y to 3 if it is.</p>
<p>Destructive way:</p>
<p>+[&lt;&lt;,-----[&gt;]&gt;&gt;[&lt;&lt;+++&gt;&gt;[-]]]</p>
<p><br></p>
<p><br></p>
<p>Here are some challenges to give you something to program in brainf**k:<=
/p>
<p>Write a program to print your name.<br>Write a program to print all prin=
table ASCII characters.<br>(From BrainF**k Golf) Write a program that will =
take a NULL ('\0') termina- ted string as input, and output source code for=
 a BrainF**k program that when compiled and ran, will print the string inpu=
t into the first program.</p>
<p><br></p>
<h3 id=3D"BrainF**k-Sometips:">Some tips:</h3>
<p>Learn to think in Brainf**k. It's very different than anything else. Rea=
d and write, and rewrite, and rewrite lots of brainf**k programs. The langu=
age doesn't give you much to work with, so it's important to use what it do=
es give you flexibly and efficiently. Don't let any abstractions get betwee=
n you and the language--get in there and grapple with it.</p>
<p>Get very comfortable with nondestructive flow control. To get out of a d=
ecision loop, rather than zeroing the starting cell by copying it elsewhere=
 and then copying it back after leaving the loop, it's often better to move=
 the pointer to a pre-existing zero nearby. Yes, this means the pointer wil=
l be in different places depending on whether you went through the loop, bu=
t that also means those places probably have different arrangements of near=
by zeros and nonzeros, which you can use to resynch the pointer location us=
ing another loop. This technique is fundamental to good Brainf**k programmi=
ng, and various forms of it will constantly prove useful.</p>
<p>That and the fact that every &gt; or &lt; costs mean that the details of=
 memory layout are important. Try out as many variations of your layout as =
you have patience for. And remember, your memory layout does not have to be=
 a rigid mapping of data to locations. It can morph over the course of exec=
ution.</p>
<p>On a larger scale, consider and even try implementing a variety of diffe=
rent algorithms. Initially it will not be obvious exactly what algorithm wi=
ll be best; it may not even be obvious what basic approach will be best, an=
d it will probably be something different than what would be best in a norm=
al language.</p>
<p>If you're dealing with large or variable-sized data, see if there's any =
way you can possibly deal with it locally, without having to keep track of =
how big it is or your numerical location within it.</p>
<p>The same data can be two different things. (Most often, a number or char=
acter and also a nonzero positional marker. But see random.b, where a bit c=
ounter doubles as the value of one cell of a cellular automaton.)</p>
<p>The same code can do two different things, and it's a lot easier to make=
 it do so in a language where code is as generic as &lt;+&lt;. Be alert to =
such possibilities. In fact, you may occasionally notice, even in what seem=
s to be a well-written program, that there are small portions that could be=
 deleted entirely, nothing added, and the thing would, by happenstance, sti=
ll run flawlessly.</p>
<p>In most languages, you use a compiler or interpreter frequently to check=
 your program's behaviour. The Brainf**k language demands greater conceptua=
l control; if you need a compiler to tell you what your program does, you d=
on't have a firm enough grasp of your program, and you probably need to sta=
re at it some more--at least if you want to have a clear enough image of th=
e conceptual halo of similar programs to be good at golf. With practice, yo=
u'll be producing a dozen versions of your program before you try running o=
ne, and by that point you'll be 95% sure that your shortest one will run co=
rrectly.</p>
<p><br></p>
<p>Further reference:</p>
<p><a href=3D"https://www.nieko.net/projects/brainfuck" class=3D"external-l=
ink" rel=3D"nofollow">https://www.nieko.net/projects/brainfuck</a></p>
<p>An archive of pre-written Brainf**k programs:</p>
<p><a href=3D"http://esoteric.sange.fi/brainfuck/" class=3D"external-link" =
rel=3D"nofollow">http://esoteric.sange.fi/brainfuck/</a></p>
<p><br></p>
<p><br></p>
    </div>
</body>
</html>
------=_Part_164_1530499361.1568295369930--
